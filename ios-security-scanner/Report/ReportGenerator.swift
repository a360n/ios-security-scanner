//
//  ReportGenerator.swift
//  ios-security-scanner
//
//  Created by Ali Al-Khazali on 5/4/25.
//

import Foundation
import PDFKit

struct ReportGenerator {
    static func generateReport(appName: String, results: [String]) {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd_HH-mm"
        let timestamp = formatter.string(from: Date())

        let reportFileName = "scan-report_\(appName)_\(timestamp).md"
        let reportsDir = "/Users/alial-khazali/Documents/swiftui/ios-security-scanner/Reports"

        if !FileManager.default.fileExists(atPath: reportsDir) {
            try? FileManager.default.createDirectory(atPath: reportsDir, withIntermediateDirectories: true)
        }

        let reportPath = "\(reportsDir)/\(reportFileName)"

        var markdown = "# iOS Security Scanner Report\n\n"
        markdown += "**Report File**: `\(reportFileName)`\n"
        markdown += "**App**: \(appName)\n"
        markdown += "**Date**: \(timestamp)\n\n"
        markdown += "---\n\n"
        markdown += "\n\n"

        for result in results {
            markdown += "\n" + result + "\n\n"
            markdown += "--------------------------------------------------\n\n"
        }



        markdown += "---\n"
        markdown += "Report generated by **iOS Security Scanner**\n"
        markdown += "Developed by [Ali Al-Khazali](https://github.com/alialkhazali)\n"
        markdown += "Generated on \(timestamp)\n"

        do {
            try markdown.write(toFile: reportPath, atomically: true, encoding: .utf8)
            print("✅ Report saved to: \(reportPath)")

            generatePDF(from: markdown, fileName: reportFileName, to: reportsDir)
        } catch {
            print("❌ Failed to write report:", error.localizedDescription)
        }
    }

    private static func generatePDF(from markdown: String, fileName: String, to directory: String) {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 3
        paragraphStyle.lineSpacing = 1

        let nsAttr = NSAttributedString(
            string: markdown,
            attributes: [
                .font: NSFont.monospacedSystemFont(ofSize: 8, weight: .regular),
                .paragraphStyle: paragraphStyle,
                .foregroundColor: NSColor.black
            ]
        )


        let pageSize = CGSize(width: 595.2, height: 841.8) // A4
        let pdfPath = "\(directory)/\(fileName.replacingOccurrences(of: ".md", with: ".pdf"))"
        let url = URL(fileURLWithPath: pdfPath)

        guard let consumer = CGDataConsumer(url: url as CFURL),
              let context = CGContext(consumer: consumer, mediaBox: nil, nil) else {
            print("❌ Failed to create PDF context.")
            return
        }

        let framesetter = CTFramesetterCreateWithAttributedString(nsAttr as CFAttributedString)

        var currentRange = CFRange(location: 0, length: 0)
        let margin: CGFloat = 40.0
        let contentRect = CGRect(x: margin, y: margin, width: pageSize.width - 2*margin, height: pageSize.height - 2*margin)

        while currentRange.location < nsAttr.length {
            context.beginPDFPage(nil)

            let path = CGMutablePath()
            path.addRect(contentRect)

            let frame = CTFramesetterCreateFrame(framesetter, currentRange, path, nil)
            CTFrameDraw(frame, context)

            let visibleRange = CTFrameGetVisibleStringRange(frame)
            currentRange.location += visibleRange.length

            context.endPDFPage()
        }

        context.closePDF()
        print(" PDF version saved to: \(pdfPath)")
    }
}
